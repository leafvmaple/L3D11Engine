#define SM_Reflection 2
#define SM_MaterialID MATERIALID_STANDARD
#define LM_JX3_CLASSICPLAYER

Texture2D _0_local1_Texture;

SamplerState g_Sampler_0
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
#ifdef MAINPLAYER
	MipLODBias = -1.0f;
#endif
};

void CalculateMainVertexNode(MaterialVertexParameters Parameters, in out ParamsMainVertexNode MainNodeParam)
{
}
void CalculateMainPixelNode(in out MaterialPixelParameters Parameters, in out ParamsMainPixelNode MainNodeParam)
{
#ifdef NORMALMAP
	{
		MainNodeParam.TangentNormal = MainNodeParam.Normal;
		float3 Tangent = cross(float3(0, 1, 0), MainNodeParam.Normal.xyz);
		float3x3 TangentToLocal =  GetTangentToLocalMatrix(Parameters);
		MainNodeParam.Normal = mul(MainNodeParam.Normal.xyz,TangentToLocal).xyz;
		MainNodeParam.Tangent = mul(Tangent, TangentToLocal).xyz;
	}
#endif
	CalcMaterialNormalParams(Parameters, MainNodeParam); 
	float4 local1 = _0_local1_Texture.Sample(g_Sampler_0, Parameters.TexCoords[0].xy);
	MainNodeParam.Albedo = local1.rgb;
	MainNodeParam.Fresnel = 0.5f;
	MainNodeParam.AO = 1.0f;
	MainNodeParam.Opacity = local1.a;
	MainNodeParam.PixelDepthOffset = 0.0f;
}
void CalculateTessMultiplier(in out MaterialTessllationParameters Parameters, in out ParamsMainHullNode HullMainNode)
{
}
void CalculateWorldDisplacement(in out MaterialTessllationParameters Parameters, in out ParamsMainDomainNode DomainMainNode)
{
}
void CalculateMainGeometryNode(in out MaterialGeometryParameters Parameters, in out ParamsMainGeometryNode MainNodeParam)
{
}
float GetOpacityColor(MaterialPixelParameters Parameters)
{
	float4 local1 = _0_local1_Texture.Sample(g_Sampler_0, Parameters.TexCoords[0].xy);
	float RetOpacity = local1.a;
	return RetOpacity;
}
float2 GetDistortion(MaterialPixelParameters Parameters)
{
	return float2(0.8f, 0.8f);
}
float GetDistortionPower(MaterialPixelParameters Parameters)
{
	return 1.0f;
}
