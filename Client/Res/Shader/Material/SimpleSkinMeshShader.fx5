//***************************************************************************************
// color.fx by Frank Luna (C) 2011 All Rights Reserved.
//
// Transforms and colors geometry.
//***************************************************************************************

struct MTLSYS_MESH_SHARED_CB 
{
    row_major float4x4 MatrixWorld;
};

cbuffer ModelSharedParam
{
    MTLSYS_MESH_SHARED_CB g_ModelParams; 
};

Texture2D _0_local1_Texture;

SamplerState g_Sampler_0
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
};

struct VertexIn
{
    float4 Position  : POSITION;
    float3 Normal    : NORMAL0;
    float4 Color     : COLOR;
    float2 TexCoords : TEXCOORD0;
    float4 Weights   : BONEWEIGHTS0;
    uint4  Indices   : BONEINDICES0;
    float4 Tangent   : TANGENT0;
};

struct VertexOut
{
    float4 PosH      : SV_POSITION;
    float4 Color     : COLOR;
    float2 TexCoords : TEXCOORD0;
};

VertexOut VS(VertexIn vin)
{
    VertexOut vout;
    
    vout.PosH = mul(vin.Position, g_ModelParams.MatrixWorld);
    
    vout.Color = float4(vin.Normal, 1.0f);
    // vout.Color = vin.Color;

    vout.TexCoords = vin.TexCoords;
    
    return vout;
}

float4 PS(VertexOut pin) : SV_Target
{
    float4 local1 = _0_local1_Texture.Sample(g_Sampler_0, pin.TexCoords.xy);

    return local1;
}

technique11 Color
{
    pass P0
    {
        SetVertexShader( CompileShader( vs_5_0, VS() ) );
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_5_0, PS() ) );
    }
}
